// Generated by gencpp from file grip_force_protocol/TargetForce.msg
// DO NOT EDIT!


#ifndef GRIP_FORCE_PROTOCOL_MESSAGE_TARGETFORCE_H
#define GRIP_FORCE_PROTOCOL_MESSAGE_TARGETFORCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grip_force_protocol
{
template <class ContainerAllocator>
struct TargetForce_
{
  typedef TargetForce_<ContainerAllocator> Type;

  TargetForce_()
    : target_force(0.0)  {
    }
  TargetForce_(const ContainerAllocator& _alloc)
    : target_force(0.0)  {
  (void)_alloc;
    }



   typedef float _target_force_type;
  _target_force_type target_force;





  typedef boost::shared_ptr< ::grip_force_protocol::TargetForce_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grip_force_protocol::TargetForce_<ContainerAllocator> const> ConstPtr;

}; // struct TargetForce_

typedef ::grip_force_protocol::TargetForce_<std::allocator<void> > TargetForce;

typedef boost::shared_ptr< ::grip_force_protocol::TargetForce > TargetForcePtr;
typedef boost::shared_ptr< ::grip_force_protocol::TargetForce const> TargetForceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grip_force_protocol::TargetForce_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grip_force_protocol::TargetForce_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grip_force_protocol::TargetForce_<ContainerAllocator1> & lhs, const ::grip_force_protocol::TargetForce_<ContainerAllocator2> & rhs)
{
  return lhs.target_force == rhs.target_force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grip_force_protocol::TargetForce_<ContainerAllocator1> & lhs, const ::grip_force_protocol::TargetForce_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grip_force_protocol

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grip_force_protocol::TargetForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grip_force_protocol::TargetForce_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grip_force_protocol::TargetForce_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0e0e39f568c9ce1104c278640a8f08d";
  }

  static const char* value(const ::grip_force_protocol::TargetForce_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0e0e39f568c9ce1ULL;
  static const uint64_t static_value2 = 0x104c278640a8f08dULL;
};

template<class ContainerAllocator>
struct DataType< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grip_force_protocol/TargetForce";
  }

  static const char* value(const ::grip_force_protocol::TargetForce_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 target_force\n"
;
  }

  static const char* value(const ::grip_force_protocol::TargetForce_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetForce_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grip_force_protocol::TargetForce_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grip_force_protocol::TargetForce_<ContainerAllocator>& v)
  {
    s << indent << "target_force: ";
    Printer<float>::stream(s, indent + "  ", v.target_force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIP_FORCE_PROTOCOL_MESSAGE_TARGETFORCE_H
