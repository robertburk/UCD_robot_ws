// Generated by gencpp from file ucd_robot/SystemState.msg
// DO NOT EDIT!


#ifndef UCD_ROBOT_MESSAGE_SYSTEMSTATE_H
#define UCD_ROBOT_MESSAGE_SYSTEMSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ucd_robot
{
template <class ContainerAllocator>
struct SystemState_
{
  typedef SystemState_<ContainerAllocator> Type;

  SystemState_()
    : system_state(false)
    , sensor_state(false)
    , gripper_state(false)
    , robot_state(false)
    , camera_state(false)  {
    }
  SystemState_(const ContainerAllocator& _alloc)
    : system_state(false)
    , sensor_state(false)
    , gripper_state(false)
    , robot_state(false)
    , camera_state(false)  {
  (void)_alloc;
    }



   typedef uint8_t _system_state_type;
  _system_state_type system_state;

   typedef uint8_t _sensor_state_type;
  _sensor_state_type sensor_state;

   typedef uint8_t _gripper_state_type;
  _gripper_state_type gripper_state;

   typedef uint8_t _robot_state_type;
  _robot_state_type robot_state;

   typedef uint8_t _camera_state_type;
  _camera_state_type camera_state;





  typedef boost::shared_ptr< ::ucd_robot::SystemState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ucd_robot::SystemState_<ContainerAllocator> const> ConstPtr;

}; // struct SystemState_

typedef ::ucd_robot::SystemState_<std::allocator<void> > SystemState;

typedef boost::shared_ptr< ::ucd_robot::SystemState > SystemStatePtr;
typedef boost::shared_ptr< ::ucd_robot::SystemState const> SystemStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ucd_robot::SystemState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ucd_robot::SystemState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ucd_robot::SystemState_<ContainerAllocator1> & lhs, const ::ucd_robot::SystemState_<ContainerAllocator2> & rhs)
{
  return lhs.system_state == rhs.system_state &&
    lhs.sensor_state == rhs.sensor_state &&
    lhs.gripper_state == rhs.gripper_state &&
    lhs.robot_state == rhs.robot_state &&
    lhs.camera_state == rhs.camera_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ucd_robot::SystemState_<ContainerAllocator1> & lhs, const ::ucd_robot::SystemState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ucd_robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ucd_robot::SystemState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ucd_robot::SystemState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucd_robot::SystemState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ucd_robot::SystemState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucd_robot::SystemState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ucd_robot::SystemState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ucd_robot::SystemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13c814d1fd4a9cbdec20374044113342";
  }

  static const char* value(const ::ucd_robot::SystemState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13c814d1fd4a9cbdULL;
  static const uint64_t static_value2 = 0xec20374044113342ULL;
};

template<class ContainerAllocator>
struct DataType< ::ucd_robot::SystemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ucd_robot/SystemState";
  }

  static const char* value(const ::ucd_robot::SystemState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ucd_robot::SystemState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool system_state \n"
"bool sensor_state\n"
"bool gripper_state\n"
"bool robot_state\n"
"bool camera_state\n"
;
  }

  static const char* value(const ::ucd_robot::SystemState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ucd_robot::SystemState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system_state);
      stream.next(m.sensor_state);
      stream.next(m.gripper_state);
      stream.next(m.robot_state);
      stream.next(m.camera_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SystemState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ucd_robot::SystemState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ucd_robot::SystemState_<ContainerAllocator>& v)
  {
    s << indent << "system_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.system_state);
    s << indent << "sensor_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sensor_state);
    s << indent << "gripper_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_state);
    s << indent << "robot_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_state);
    s << indent << "camera_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.camera_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UCD_ROBOT_MESSAGE_SYSTEMSTATE_H
